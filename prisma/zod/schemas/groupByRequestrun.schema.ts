import type { Prisma } from '@prisma/client';
import * as z from 'zod';
import { RequestrunWhereInputObjectSchema as RequestrunWhereInputObjectSchema } from './objects/RequestrunWhereInput.schema';
import { RequestrunOrderByWithAggregationInputObjectSchema as RequestrunOrderByWithAggregationInputObjectSchema } from './objects/RequestrunOrderByWithAggregationInput.schema';
import { RequestrunScalarWhereWithAggregatesInputObjectSchema as RequestrunScalarWhereWithAggregatesInputObjectSchema } from './objects/RequestrunScalarWhereWithAggregatesInput.schema';
import { RequestrunScalarFieldEnumSchema } from './enums/RequestrunScalarFieldEnum.schema';
import { RequestrunCountAggregateInputObjectSchema as RequestrunCountAggregateInputObjectSchema } from './objects/RequestrunCountAggregateInput.schema';
import { RequestrunMinAggregateInputObjectSchema as RequestrunMinAggregateInputObjectSchema } from './objects/RequestrunMinAggregateInput.schema';
import { RequestrunMaxAggregateInputObjectSchema as RequestrunMaxAggregateInputObjectSchema } from './objects/RequestrunMaxAggregateInput.schema';
import { RequestrunAvgAggregateInputObjectSchema as RequestrunAvgAggregateInputObjectSchema } from './objects/RequestrunAvgAggregateInput.schema';
import { RequestrunSumAggregateInputObjectSchema as RequestrunSumAggregateInputObjectSchema } from './objects/RequestrunSumAggregateInput.schema';

export const RequestrunGroupBySchema: z.ZodType<Prisma.RequestrunGroupByArgs> = z.object({ where: RequestrunWhereInputObjectSchema.optional(), orderBy: z.union([RequestrunOrderByWithAggregationInputObjectSchema, RequestrunOrderByWithAggregationInputObjectSchema.array()]).optional(), having: RequestrunScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(RequestrunScalarFieldEnumSchema), _count: z.union([ z.literal(true), RequestrunCountAggregateInputObjectSchema ]).optional(), _min: RequestrunMinAggregateInputObjectSchema.optional(), _max: RequestrunMaxAggregateInputObjectSchema.optional(), _avg: RequestrunAvgAggregateInputObjectSchema.optional(), _sum: RequestrunSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.RequestrunGroupByArgs>;

export const RequestrunGroupByZodSchema = z.object({ where: RequestrunWhereInputObjectSchema.optional(), orderBy: z.union([RequestrunOrderByWithAggregationInputObjectSchema, RequestrunOrderByWithAggregationInputObjectSchema.array()]).optional(), having: RequestrunScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(RequestrunScalarFieldEnumSchema), _count: z.union([ z.literal(true), RequestrunCountAggregateInputObjectSchema ]).optional(), _min: RequestrunMinAggregateInputObjectSchema.optional(), _max: RequestrunMaxAggregateInputObjectSchema.optional(), _avg: RequestrunAvgAggregateInputObjectSchema.optional(), _sum: RequestrunSumAggregateInputObjectSchema.optional() }).strict();